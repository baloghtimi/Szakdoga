/*
 * generated by Xtext 2.13.0
 */
package org.mondo.collaboration.policy.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesRoleParserRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Assignment cPolicyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPolicyPolicyParserRuleCall_1_0 = (RuleCall)cPolicyAssignment_1.eContents().get(0);
		
		//Model:
		//	roles+=Role*
		//	policy=Policy;
		@Override public ParserRule getRule() { return rule; }
		
		////(instanceModel=InstanceModel)?
		//roles+=Role* policy=Policy
		public Group getGroup() { return cGroup; }
		
		////(instanceModel=InstanceModel)?
		//roles+=Role*
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_0_0() { return cRolesRoleParserRuleCall_0_0; }
		
		//policy=Policy
		public Assignment getPolicyAssignment_1() { return cPolicyAssignment_1; }
		
		//Policy
		public RuleCall getPolicyPolicyParserRuleCall_1_0() { return cPolicyPolicyParserRuleCall_1_0; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*InstanceModel:
		//	'import' importURI=STRING;*/ Role:
		//	User | Group;
		@Override public ParserRule getRule() { return rule; }
		
		//User | Group
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//User
		public RuleCall getUserParserRuleCall_0() { return cUserParserRuleCall_0; }
		
		//Group
		public RuleCall getGroupParserRuleCall_1() { return cGroupParserRuleCall_1; }
	}
	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//User:
		//	'user' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'user' name=ID
		public Group getGroup() { return cGroup; }
		
		//'user'
		public Keyword getUserKeyword_0() { return cUserKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRolesRoleCrossReference_3_0 = (CrossReference)cRolesAssignment_3.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_3_0_1 = (RuleCall)cRolesRoleCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRolesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRolesRoleCrossReference_4_1_0 = (CrossReference)cRolesAssignment_4_1.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRolesRoleCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//	'group' name=ID '{' roles+=[Role] (',' roles+=[Role])* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'group' name=ID '{' roles+=[Role] (',' roles+=[Role])* '}'
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//roles+=[Role]
		public Assignment getRolesAssignment_3() { return cRolesAssignment_3; }
		
		//[Role]
		public CrossReference getRolesRoleCrossReference_3_0() { return cRolesRoleCrossReference_3_0; }
		
		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_3_0_1() { return cRolesRoleIDTerminalRuleCall_3_0_1; }
		
		//(',' roles+=[Role])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//roles+=[Role]
		public Assignment getRolesAssignment_4_1() { return cRolesAssignment_4_1; }
		
		//[Role]
		public CrossReference getRolesRoleCrossReference_4_1_0() { return cRolesRoleCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_4_1_0_1() { return cRolesRoleIDTerminalRuleCall_4_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PolicyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPolicyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessibilityLevelEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationTypeEnumRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDefaultKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRulesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRulesRuleParserRuleCall_7_0 = (RuleCall)cRulesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cResolutionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cResolutionResolutionTypeEnumRuleCall_10_0 = (RuleCall)cResolutionAssignment_10.eContents().get(0);
		private final Keyword cResolutionKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Policy:
		//	'policy' name=ID access=AccessibilityLevel operation=OperationType 'by' 'default' '{'
		//	rules+=Rule*
		//	'}' 'with' resolution=ResolutionType 'resolution';
		@Override public ParserRule getRule() { return rule; }
		
		//'policy' name=ID access=AccessibilityLevel operation=OperationType 'by' 'default' '{' rules+=Rule* '}' 'with'
		//resolution=ResolutionType 'resolution'
		public Group getGroup() { return cGroup; }
		
		//'policy'
		public Keyword getPolicyKeyword_0() { return cPolicyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//access=AccessibilityLevel
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessibilityLevel
		public RuleCall getAccessAccessibilityLevelEnumRuleCall_2_0() { return cAccessAccessibilityLevelEnumRuleCall_2_0; }
		
		//operation=OperationType
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//OperationType
		public RuleCall getOperationOperationTypeEnumRuleCall_3_0() { return cOperationOperationTypeEnumRuleCall_3_0; }
		
		//'by'
		public Keyword getByKeyword_4() { return cByKeyword_4; }
		
		//'default'
		public Keyword getDefaultKeyword_5() { return cDefaultKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_7() { return cRulesAssignment_7; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_7_0() { return cRulesRuleParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'with'
		public Keyword getWithKeyword_9() { return cWithKeyword_9; }
		
		//resolution=ResolutionType
		public Assignment getResolutionAssignment_10() { return cResolutionAssignment_10; }
		
		//ResolutionType
		public RuleCall getResolutionResolutionTypeEnumRuleCall_10_0() { return cResolutionResolutionTypeEnumRuleCall_10_0; }
		
		//'resolution'
		public Keyword getResolutionKeyword_11() { return cResolutionKeyword_11; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessAccessibilityLevelEnumRuleCall_2_0 = (RuleCall)cAccessAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationTypeEnumRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRolesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRolesRoleCrossReference_5_0 = (CrossReference)cRolesAssignment_5.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_5_0_1 = (RuleCall)cRolesRoleCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRolesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRolesRoleCrossReference_6_1_0 = (CrossReference)cRolesAssignment_6_1.eContents().get(0);
		private final RuleCall cRolesRoleIDTerminalRuleCall_6_1_0_1 = (RuleCall)cRolesRoleCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cFromKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cQueryKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPatternAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cPatternPatternCrossReference_10_0 = (CrossReference)cPatternAssignment_10.eContents().get(0);
		private final RuleCall cPatternPatternSTRINGTerminalRuleCall_10_0_1 = (RuleCall)cPatternPatternCrossReference_10_0.eContents().get(1);
		private final Keyword cSelectKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cAssetAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cAssetModelFactParserRuleCall_12_0 = (RuleCall)cAssetAssignment_12.eContents().get(0);
		private final Assignment cBindingsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cBindingsBindingParserRuleCall_13_0 = (RuleCall)cBindingsAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cWithKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cPriorityAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_15_1_0 = (RuleCall)cPriorityAssignment_15_1.eContents().get(0);
		private final Keyword cPriorityKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		
		//Rule:
		//	'rule' name=ID access=AccessibilityLevel operation=OperationType? 'to' roles+=[Role] (',' roles+=[Role])* '{'
		//	'from' 'query' pattern=[iql::Pattern|STRING]
		//	'select' asset=ModelFact
		//	bindings+=Binding*
		//	'}' ('with' priority=INT 'priority')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID access=AccessibilityLevel operation=OperationType? 'to' roles+=[Role] (',' roles+=[Role])* '{' 'from'
		//'query' pattern=[iql::Pattern|STRING] 'select' asset=ModelFact bindings+=Binding* '}' ('with' priority=INT
		//'priority')?
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//access=AccessibilityLevel
		public Assignment getAccessAssignment_2() { return cAccessAssignment_2; }
		
		//AccessibilityLevel
		public RuleCall getAccessAccessibilityLevelEnumRuleCall_2_0() { return cAccessAccessibilityLevelEnumRuleCall_2_0; }
		
		//operation=OperationType?
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//OperationType
		public RuleCall getOperationOperationTypeEnumRuleCall_3_0() { return cOperationOperationTypeEnumRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//roles+=[Role]
		public Assignment getRolesAssignment_5() { return cRolesAssignment_5; }
		
		//[Role]
		public CrossReference getRolesRoleCrossReference_5_0() { return cRolesRoleCrossReference_5_0; }
		
		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_5_0_1() { return cRolesRoleIDTerminalRuleCall_5_0_1; }
		
		//(',' roles+=[Role])*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//roles+=[Role]
		public Assignment getRolesAssignment_6_1() { return cRolesAssignment_6_1; }
		
		//[Role]
		public CrossReference getRolesRoleCrossReference_6_1_0() { return cRolesRoleCrossReference_6_1_0; }
		
		//ID
		public RuleCall getRolesRoleIDTerminalRuleCall_6_1_0_1() { return cRolesRoleIDTerminalRuleCall_6_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//'from'
		public Keyword getFromKeyword_8() { return cFromKeyword_8; }
		
		//'query'
		public Keyword getQueryKeyword_9() { return cQueryKeyword_9; }
		
		//pattern=[iql::Pattern|STRING]
		public Assignment getPatternAssignment_10() { return cPatternAssignment_10; }
		
		//[iql::Pattern|STRING]
		public CrossReference getPatternPatternCrossReference_10_0() { return cPatternPatternCrossReference_10_0; }
		
		//STRING
		public RuleCall getPatternPatternSTRINGTerminalRuleCall_10_0_1() { return cPatternPatternSTRINGTerminalRuleCall_10_0_1; }
		
		//'select'
		public Keyword getSelectKeyword_11() { return cSelectKeyword_11; }
		
		//asset=ModelFact
		public Assignment getAssetAssignment_12() { return cAssetAssignment_12; }
		
		//ModelFact
		public RuleCall getAssetModelFactParserRuleCall_12_0() { return cAssetModelFactParserRuleCall_12_0; }
		
		//bindings+=Binding*
		public Assignment getBindingsAssignment_13() { return cBindingsAssignment_13; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_13_0() { return cBindingsBindingParserRuleCall_13_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//('with' priority=INT 'priority')?
		public Group getGroup_15() { return cGroup_15; }
		
		//'with'
		public Keyword getWithKeyword_15_0() { return cWithKeyword_15_0; }
		
		//priority=INT
		public Assignment getPriorityAssignment_15_1() { return cPriorityAssignment_15_1; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_15_1_0() { return cPriorityINTTerminalRuleCall_15_1_0; }
		
		//'priority'
		public Keyword getPriorityKeyword_15_2() { return cPriorityKeyword_15_2; }
	}
	public class ModelFactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.ModelFact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectFactParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceFactParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeFactParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ModelFact:
		//	ObjectFact | ReferenceFact | AttributeFact;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectFact | ReferenceFact | AttributeFact
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectFact
		public RuleCall getObjectFactParserRuleCall_0() { return cObjectFactParserRuleCall_0; }
		
		//ReferenceFact
		public RuleCall getReferenceFactParserRuleCall_1() { return cReferenceFactParserRuleCall_1; }
		
		//AttributeFact
		public RuleCall getAttributeFactParserRuleCall_2() { return cAttributeFactParserRuleCall_2; }
	}
	public class ObjectFactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.ObjectFact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectFact:
		//	'obj' '(' variable=[iql::Variable] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'obj' '(' variable=[iql::Variable] ')'
		public Group getGroup() { return cGroup; }
		
		//'obj'
		public Keyword getObjKeyword_0() { return cObjKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=[iql::Variable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[iql::Variable]
		public CrossReference getVariableVariableCrossReference_2_0() { return cVariableVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_0_1() { return cVariableVariableIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReferenceFactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.ReferenceFact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceVarVariableCrossReference_2_0 = (CrossReference)cSourceVarAssignment_2.eContents().get(0);
		private final RuleCall cSourceVarVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceVarVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetVarVariableCrossReference_4_0 = (CrossReference)cTargetVarAssignment_4.eContents().get(0);
		private final RuleCall cTargetVarVariableIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetVarVariableCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReferenceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cReferenceEReferenceCrossReference_6_0 = (CrossReference)cReferenceAssignment_6.eContents().get(0);
		private final RuleCall cReferenceEReferenceIDTerminalRuleCall_6_0_1 = (RuleCall)cReferenceEReferenceCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ReferenceFact:
		//	'ref' '(' sourceVar=[iql::Variable] '->' targetVar=[iql::Variable] ':' reference=[ecore::EReference] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' '(' sourceVar=[iql::Variable] '->' targetVar=[iql::Variable] ':' reference=[ecore::EReference] ')'
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//sourceVar=[iql::Variable]
		public Assignment getSourceVarAssignment_2() { return cSourceVarAssignment_2; }
		
		//[iql::Variable]
		public CrossReference getSourceVarVariableCrossReference_2_0() { return cSourceVarVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceVarVariableIDTerminalRuleCall_2_0_1() { return cSourceVarVariableIDTerminalRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetVar=[iql::Variable]
		public Assignment getTargetVarAssignment_4() { return cTargetVarAssignment_4; }
		
		//[iql::Variable]
		public CrossReference getTargetVarVariableCrossReference_4_0() { return cTargetVarVariableCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetVarVariableIDTerminalRuleCall_4_0_1() { return cTargetVarVariableIDTerminalRuleCall_4_0_1; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//reference=[ecore::EReference]
		public Assignment getReferenceAssignment_6() { return cReferenceAssignment_6; }
		
		//[ecore::EReference]
		public CrossReference getReferenceEReferenceCrossReference_6_0() { return cReferenceEReferenceCrossReference_6_0; }
		
		//ID
		public RuleCall getReferenceEReferenceIDTerminalRuleCall_6_0_1() { return cReferenceEReferenceIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AttributeFactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.AttributeFact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableVariableCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAttributeEAttributeCrossReference_4_0 = (CrossReference)cAttributeAssignment_4.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_4_0_1 = (RuleCall)cAttributeEAttributeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributeFact:
		//	'attr' '(' variable=[iql::Variable] ':' attribute=[ecore::EAttribute] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'attr' '(' variable=[iql::Variable] ':' attribute=[ecore::EAttribute] ')'
		public Group getGroup() { return cGroup; }
		
		//'attr'
		public Keyword getAttrKeyword_0() { return cAttrKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variable=[iql::Variable]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[iql::Variable]
		public CrossReference getVariableVariableCrossReference_2_0() { return cVariableVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_2_0_1() { return cVariableVariableIDTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }
		
		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_4_0() { return cAttributeEAttributeCrossReference_4_0; }
		
		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_4_0_1() { return cAttributeEAttributeIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBoundKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBindAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBindBindParserRuleCall_5_0 = (RuleCall)cBindAssignment_5.eContents().get(0);
		
		//Binding:
		//	'where' variable=[iql::Variable] 'is' 'bound' 'to' bind=Bind;
		@Override public ParserRule getRule() { return rule; }
		
		//'where' variable=[iql::Variable] 'is' 'bound' 'to' bind=Bind
		public Group getGroup() { return cGroup; }
		
		//'where'
		public Keyword getWhereKeyword_0() { return cWhereKeyword_0; }
		
		//variable=[iql::Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[iql::Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//'bound'
		public Keyword getBoundKeyword_3() { return cBoundKeyword_3; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//bind=Bind
		public Assignment getBindAssignment_5() { return cBindAssignment_5; }
		
		//Bind
		public RuleCall getBindBindParserRuleCall_5_0() { return cBindBindParserRuleCall_5_0; }
	}
	public class BindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.Bind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueStringAssignment_0.eContents().get(0);
		private final Assignment cValueIntegerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIntegerINTTerminalRuleCall_1_0 = (RuleCall)cValueIntegerAssignment_1.eContents().get(0);
		
		//Bind:
		//	valueString=STRING | valueInteger=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//valueString=STRING | valueInteger=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_0() { return cValueStringAssignment_0; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_0_0() { return cValueStringSTRINGTerminalRuleCall_0_0; }
		
		//valueInteger=INT
		public Assignment getValueIntegerAssignment_1() { return cValueIntegerAssignment_1; }
		
		//INT
		public RuleCall getValueIntegerINTTerminalRuleCall_1_0() { return cValueIntegerINTTerminalRuleCall_1_0; }
	}
	
	public class AccessibilityLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.AccessibilityLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLOWAllowKeyword_0_0 = (Keyword)cALLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDENYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDENYDenyKeyword_1_0 = (Keyword)cDENYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOBFUSCATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOBFUSCATEObfuscateKeyword_2_0 = (Keyword)cOBFUSCATEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccessibilityLevel:
		//	ALLOW='allow' | DENY='deny' | OBFUSCATE='obfuscate';
		public EnumRule getRule() { return rule; }
		
		//ALLOW='allow' | DENY='deny' | OBFUSCATE='obfuscate'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALLOW='allow'
		public EnumLiteralDeclaration getALLOWEnumLiteralDeclaration_0() { return cALLOWEnumLiteralDeclaration_0; }
		
		//'allow'
		public Keyword getALLOWAllowKeyword_0_0() { return cALLOWAllowKeyword_0_0; }
		
		//DENY='deny'
		public EnumLiteralDeclaration getDENYEnumLiteralDeclaration_1() { return cDENYEnumLiteralDeclaration_1; }
		
		//'deny'
		public Keyword getDENYDenyKeyword_1_0() { return cDENYDenyKeyword_1_0; }
		
		//OBFUSCATE='obfuscate'
		public EnumLiteralDeclaration getOBFUSCATEEnumLiteralDeclaration_2() { return cOBFUSCATEEnumLiteralDeclaration_2; }
		
		//'obfuscate'
		public Keyword getOBFUSCATEObfuscateKeyword_2_0() { return cOBFUSCATEObfuscateKeyword_2_0; }
	}
	public class OperationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSETUnsetKeyword_0_0 = (Keyword)cUNSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREADRKeyword_1_0 = (Keyword)cREADEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWRITEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWRITEWKeyword_2_0 = (Keyword)cWRITEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREADWRITEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREADWRITERWKeyword_3_0 = (Keyword)cREADWRITEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OperationType:
		//	UNSET='unset' | READ='R' | WRITE='W' | READWRITE='RW';
		public EnumRule getRule() { return rule; }
		
		//UNSET='unset' | READ='R' | WRITE='W' | READWRITE='RW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNSET='unset'
		public EnumLiteralDeclaration getUNSETEnumLiteralDeclaration_0() { return cUNSETEnumLiteralDeclaration_0; }
		
		//'unset'
		public Keyword getUNSETUnsetKeyword_0_0() { return cUNSETUnsetKeyword_0_0; }
		
		//READ='R'
		public EnumLiteralDeclaration getREADEnumLiteralDeclaration_1() { return cREADEnumLiteralDeclaration_1; }
		
		//'R'
		public Keyword getREADRKeyword_1_0() { return cREADRKeyword_1_0; }
		
		//WRITE='W'
		public EnumLiteralDeclaration getWRITEEnumLiteralDeclaration_2() { return cWRITEEnumLiteralDeclaration_2; }
		
		//'W'
		public Keyword getWRITEWKeyword_2_0() { return cWRITEWKeyword_2_0; }
		
		//READWRITE='RW'
		public EnumLiteralDeclaration getREADWRITEEnumLiteralDeclaration_3() { return cREADWRITEEnumLiteralDeclaration_3; }
		
		//'RW'
		public Keyword getREADWRITERWKeyword_3_0() { return cREADWRITERWKeyword_3_0; }
	}
	public class ResolutionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.mondo.collaboration.policy.Rules.ResolutionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRESTRICTIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRESTRICTIVERestrictiveKeyword_0_0 = (Keyword)cRESTRICTIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPERMISSIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPERMISSIVEPermissiveKeyword_1_0 = (Keyword)cPERMISSIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ResolutionType:
		//	RESTRICTIVE='restrictive' | PERMISSIVE='permissive';
		public EnumRule getRule() { return rule; }
		
		//RESTRICTIVE='restrictive' | PERMISSIVE='permissive'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RESTRICTIVE='restrictive'
		public EnumLiteralDeclaration getRESTRICTIVEEnumLiteralDeclaration_0() { return cRESTRICTIVEEnumLiteralDeclaration_0; }
		
		//'restrictive'
		public Keyword getRESTRICTIVERestrictiveKeyword_0_0() { return cRESTRICTIVERestrictiveKeyword_0_0; }
		
		//PERMISSIVE='permissive'
		public EnumLiteralDeclaration getPERMISSIVEEnumLiteralDeclaration_1() { return cPERMISSIVEEnumLiteralDeclaration_1; }
		
		//'permissive'
		public Keyword getPERMISSIVEPermissiveKeyword_1_0() { return cPERMISSIVEPermissiveKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final RoleElements pRole;
	private final UserElements pUser;
	private final GroupElements pGroup;
	private final PolicyElements pPolicy;
	private final RuleElements pRule;
	private final ModelFactElements pModelFact;
	private final ObjectFactElements pObjectFact;
	private final ReferenceFactElements pReferenceFact;
	private final AttributeFactElements pAttributeFact;
	private final BindingElements pBinding;
	private final BindElements pBind;
	private final AccessibilityLevelElements eAccessibilityLevel;
	private final OperationTypeElements eOperationType;
	private final ResolutionTypeElements eResolutionType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RulesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRole = new RoleElements();
		this.pUser = new UserElements();
		this.pGroup = new GroupElements();
		this.pPolicy = new PolicyElements();
		this.pRule = new RuleElements();
		this.pModelFact = new ModelFactElements();
		this.pObjectFact = new ObjectFactElements();
		this.pReferenceFact = new ReferenceFactElements();
		this.pAttributeFact = new AttributeFactElements();
		this.pBinding = new BindingElements();
		this.pBind = new BindElements();
		this.eAccessibilityLevel = new AccessibilityLevelElements();
		this.eOperationType = new OperationTypeElements();
		this.eResolutionType = new ResolutionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mondo.collaboration.policy.Rules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	roles+=Role*
	//	policy=Policy;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///*InstanceModel:
	//	'import' importURI=STRING;*/ Role:
	//	User | Group;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//User:
	//	'user' name=ID;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}
	
	//Group:
	//	'group' name=ID '{' roles+=[Role] (',' roles+=[Role])* '}';
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Policy:
	//	'policy' name=ID access=AccessibilityLevel operation=OperationType 'by' 'default' '{'
	//	rules+=Rule*
	//	'}' 'with' resolution=ResolutionType 'resolution';
	public PolicyElements getPolicyAccess() {
		return pPolicy;
	}
	
	public ParserRule getPolicyRule() {
		return getPolicyAccess().getRule();
	}
	
	//Rule:
	//	'rule' name=ID access=AccessibilityLevel operation=OperationType? 'to' roles+=[Role] (',' roles+=[Role])* '{'
	//	'from' 'query' pattern=[iql::Pattern|STRING]
	//	'select' asset=ModelFact
	//	bindings+=Binding*
	//	'}' ('with' priority=INT 'priority')?;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//ModelFact:
	//	ObjectFact | ReferenceFact | AttributeFact;
	public ModelFactElements getModelFactAccess() {
		return pModelFact;
	}
	
	public ParserRule getModelFactRule() {
		return getModelFactAccess().getRule();
	}
	
	//ObjectFact:
	//	'obj' '(' variable=[iql::Variable] ')';
	public ObjectFactElements getObjectFactAccess() {
		return pObjectFact;
	}
	
	public ParserRule getObjectFactRule() {
		return getObjectFactAccess().getRule();
	}
	
	//ReferenceFact:
	//	'ref' '(' sourceVar=[iql::Variable] '->' targetVar=[iql::Variable] ':' reference=[ecore::EReference] ')';
	public ReferenceFactElements getReferenceFactAccess() {
		return pReferenceFact;
	}
	
	public ParserRule getReferenceFactRule() {
		return getReferenceFactAccess().getRule();
	}
	
	//AttributeFact:
	//	'attr' '(' variable=[iql::Variable] ':' attribute=[ecore::EAttribute] ')';
	public AttributeFactElements getAttributeFactAccess() {
		return pAttributeFact;
	}
	
	public ParserRule getAttributeFactRule() {
		return getAttributeFactAccess().getRule();
	}
	
	//Binding:
	//	'where' variable=[iql::Variable] 'is' 'bound' 'to' bind=Bind;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//Bind:
	//	valueString=STRING | valueInteger=INT;
	public BindElements getBindAccess() {
		return pBind;
	}
	
	public ParserRule getBindRule() {
		return getBindAccess().getRule();
	}
	
	//enum AccessibilityLevel:
	//	ALLOW='allow' | DENY='deny' | OBFUSCATE='obfuscate';
	public AccessibilityLevelElements getAccessibilityLevelAccess() {
		return eAccessibilityLevel;
	}
	
	public EnumRule getAccessibilityLevelRule() {
		return getAccessibilityLevelAccess().getRule();
	}
	
	//enum OperationType:
	//	UNSET='unset' | READ='R' | WRITE='W' | READWRITE='RW';
	public OperationTypeElements getOperationTypeAccess() {
		return eOperationType;
	}
	
	public EnumRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//enum ResolutionType:
	//	RESTRICTIVE='restrictive' | PERMISSIVE='permissive';
	public ResolutionTypeElements getResolutionTypeAccess() {
		return eResolutionType;
	}
	
	public EnumRule getResolutionTypeRule() {
		return getResolutionTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
